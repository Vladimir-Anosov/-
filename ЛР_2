#include <iostream>
#include <initializer_list>
#include <stdexcept>
#include <string>

namespace containers {

    template <typename T>
    class List {
    private:
        // Вложенная структура Node
        struct Node {
            T value;         // Значение элемента
            Node* next;      // Указатель на следующий элемент

            // Приватный конструктор
            Node(const T& val, Node* nextNode = nullptr) : value(val), next(nextNode) {}
            Node(T&& val, Node* nextNode = nullptr) : value(std::move(val)), next(nextNode) {}

            friend class List; // Доступ к Node только из List
        };

        Node* head;     // Указатель на первый элемент списка
        size_t size;    // Размер списка

    public:
        // Конструктор по умолчанию
        List() : head(nullptr), size(0) {}

        // Конструктор от initializer_list
        List(std::initializer_list<T> initList) : head(nullptr), size(0) {
            for (const T& elem : initList) {
                push_back(elem);
            }
        }

        // Конструктор копирования
        List(const List& other) : head(nullptr), size(0) {
            Node* current = other.head;
            while (current) {
                push_back(current->value);
                current = current->next;
            }
        }

        // Оператор копирующего присваивания
        List& operator=(const List& other) {
            if (this == &other) return *this;
            clear();
            Node* current = other.head;
            while (current) {
                push_back(current->value);
                current = current->next;
            }
            return *this;
        }

        // Конструктор перемещения
        List(List&& other) noexcept : head(other.head), size(other.size) {
            other.head = nullptr;
            other.size = 0;
        }

        // Оператор перемещающего присваивания
        List& operator=(List&& other) noexcept {
            if (this == &other) return *this;
            clear();
            head = other.head;
            size = other.size;
            other.head = nullptr;
            other.size = 0;
            return *this;
        }

        // Деструктор
        ~List() { clear(); }

        // Добавление элемента в конец списка
        void push_back(const T& value) {
            if (!head) {
                head = new Node(value);
            }
            else {
                Node* current = head;
                while (current->next) {
                    current = current->next;
                }
                current->next = new Node(value);
            }
            ++size;
        }

        // Удаление элемента из конца списка
        void pop_back() {
            if (!head) throw std::out_of_range("List is empty");
            if (!head->next) {
                delete head;
                head = nullptr;
            }
            else {
                Node* current = head;
                while (current->next && current->next->next) {
                    current = current->next;
                }
                delete current->next;
                current->next = nullptr;
            }
            --size;
        }

        // Индексирование
        T& operator[](size_t index) {
            if (index >= size) throw std::out_of_range("Index out of range");
            Node* current = head;
            for (size_t i = 0; i < index; ++i) {
                current = current->next;
            }
            return current->value;
        }

        const T& operator[](size_t index) const {
            if (index >= size) throw std::out_of_range("Index out of range");
            Node* current = head;
            for (size_t i = 0; i < index; ++i) {
                current = current->next;
            }
            return current->value;
        }

        // Вставка элемента в произвольную позицию
        void insert(size_t index, const T& value) {
            if (index > size) throw std::out_of_range("Index out of range");
            if (index == 0) {
                head = new Node(value, head);
            }
            else {
                Node* current = head;
                for (size_t i = 0; i < index - 1; ++i) {
                    current = current->next;
                }
                current->next = new Node(value, current->next);
            }
            ++size;
        }

        // Очистка списка
        void clear() {
            while (head) {
                Node* temp = head;
                head = head->next;
                delete temp;
            }
            size = 0;
        }

        // Получение размера списка
        size_t getSize() const { return size; }

        // Печать списка
        void print() const {
            Node* current = head;
            while (current) {
                std::cout << current->value << " ";
                current = current->next;
            }
            std::cout << std::endl;
        }
    };

} // namespace containers

int main() {
    setlocale(LC_ALL, "Russian");
    using namespace containers;

    List<int> intList = { 1, 2, 3 };
    List<double> doubleList = { 1.1, 2.2, 3.3 };
    List<std::string> stringList = { "Hello", "World", "!" };

    int choice;
    do {
        std::cout << "\nMenu:\n";
        std::cout << "1. Add element to int list\n";
        std::cout << "2. Remove last element from int list\n";
        std::cout << "3. Print int list\n";
        std::cout << "4. Add element to double list\n";
        std::cout << "5. Remove last element from double list\n";
        std::cout << "6. Print double list\n";
        std::cout << "7. Add element to string list\n";
        std::cout << "8. Remove last element from string list\n";
        std::cout << "9. Print string list\n";
        std::cout << "0. Exit\n";
        std::cout << "Enter your choice: ";
        std::cin >> choice;

        switch (choice) {
        case 1: {
            int value;
            std::cout << "Enter value to add: ";
            std::cin >> value;
            intList.push_back(value);
            break;
        }
        case 2:
            intList.pop_back();
            break;
        case 3:
            intList.print();
            break;
        case 4: {
            double value;
            std::cout << "Enter value to add: ";
            std::cin >> value;
            doubleList.push_back(value);
            break;
        }
        case 5:
            doubleList.pop_back();
            break;
        case 6:
            doubleList.print();
            break;
        case 7: {
            std::string value;
            std::cout << "Enter value to add: ";
            std::cin >> value;
            stringList.push_back(value);
            break;
        }
        case 8:
            stringList.pop_back();
            break;
        case 9:
            stringList.print();
            break;
        case 0:
            std::cout << "Exiting...\n";
            break;
        default:
            std::cout << "Invalid choice!\n";
        }
    } while (choice != 0);

    return 0;
}
